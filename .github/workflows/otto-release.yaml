name: Otto Release

# PR-based release trigger only
on:
  pull_request:
    types: [closed]
    branches:
      - main
    paths:
      - 'otto/**'

permissions:
  contents: write
  packages: write

jobs:
  # PR-based tag creation (only runs on merged PRs with release label)
  create-release:
    if: |
      github.event.pull_request.merged == true && 
      contains(github.event.pull_request.labels.*.name, 'release')
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.create_tag.outputs.tag_name }}
      release_created: ${{ steps.create_tag.outputs.release_created }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Determine release type
        id: release_type
        run: |
          RELEASE_TYPE="patch"
          
          if contains(github.event.pull_request.labels.*.name, 'release:major'); then
            RELEASE_TYPE="major"
          elif contains(github.event.pull_request.labels.*.name, 'release:minor'); then
            RELEASE_TYPE="minor"
          fi
          
          echo "release_type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
      
      - name: Determine version
        id: next_version
        run: |
          # Get latest tag or use v0.0.0 as base if none exists
          git fetch --tags
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          # Strip 'v' prefix
          CURRENT_VERSION=${LATEST_TAG#v}
          
          # Split into major, minor, patch
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Increment based on release type
          RELEASE_TYPE="${{ steps.release_type.outputs.release_type }}"
          if [ "$RELEASE_TYPE" = "major" ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ "$RELEASE_TYPE" = "minor" ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi
          
          # Create new version string
          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version will be: $NEW_VERSION"
      
      - name: Create tag
        id: create_tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEW_VERSION: ${{ steps.next_version.outputs.new_version }}
        run: |
          # Extract PR title and body for release notes
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Create and push tag
          echo "Creating tag $NEW_VERSION"
          git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION from PR #$PR_NUMBER: $PR_TITLE"
          git push origin "$NEW_VERSION"
          
          echo "tag_name=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "release_created=true" >> $GITHUB_OUTPUT

  # Main release job - runs after tag creation
  goreleaser:
    needs: [create-release]
    if: needs.create-release.outputs.release_created == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./otto
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # Use the newly created tag
          ref: ${{ needs.create-release.outputs.tag_name }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: ./otto/go.mod
          cache: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
          workdir: ./otto
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}